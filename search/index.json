[{"content":" pytorch环境相当于一个package，package里面有不同的区域，不同的区域有不同的工具。 Python语法有两大法宝：dir()、help() 函数。 dir()：打开，看见里面有多少分区、多少工具。 help(): 说明书。 ","date":"2025-04-14T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/103_python%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%B8%A4%E5%A4%A7%E6%B3%95%E5%AE%9D%E5%87%BD%E6%95%B0/","title":"103_Python学习中的两大法宝函数"},{"content":"Pytorch加载数据 Pytorch加载数据需要Dataset、Dataloader\nDataset提供一种方式去获取每个数据及其对应的label，告诉我们总共有多少个数据。 Dataloader为后面的网络提供不同的数据形式，它将一批一批数据进行一个打包。 常用数据集两种方式 常用的第一种数据形式，文件夹的名称是它的label。 常用的第二种形式，lebel为文本格式，文本名称为图片名称，文本中的内容为对应的label。 路径直接加载数据 1 2 3 4 5 from PIL import Image img_path = \u0026#34;Data/FirstTypeData/train/ants/0013035.jpg\u0026#34; img = Image.open(img_path) img.show() Dataset加载路径 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from torch.utils.data import Dataset from PIL import Image import os class MyData(Dataset): def __init__(self,root_dir,label_dir): # 该魔术方法当创建一个事例对象时，会自动调用该函数 self.root_dir = root_dir # self.root_dir 相当于类中的全局变量 self.label_dir = label_dir self.path = os.path.join(self.root_dir,self.label_dir) # 字符串拼接，根据是Windows或Lixus系统情况进行拼接 self.img_path = os.listdir(self.path) # 获得路径下所有图片的地址 def __getitem__(self,idx): img_name = self.img_path[idx] img_item_path = os.path.join(self.root_dir,self.label_dir,img_name) img = Image.open(img_item_path) label = self.label_dir return img, label def __len__(self): return len(self.img_path) root_dir = \u0026#34;Data/FirstTypeData/train\u0026#34; ants_label_dir = \u0026#34;ants\u0026#34; bees_label_dir = \u0026#34;bees\u0026#34; ants_dataset = MyData(root_dir, ants_label_dir) bees_dataset = MyData(root_dir, bees_label_dir) print(len(ants_dataset)) print(len(bees_dataset)) train_dataset = ants_dataset + bees_dataset # train_dataset 就是两个数据集的集合了 print(len(train_dataset)) img,label = train_dataset[200] print(\u0026#34;label：\u0026#34;,label) img.show() ","date":"2025-04-14T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/104_pytorch%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%88%9D%E8%AE%A4%E8%AF%86/","title":"104_PyTorch加载数据初认识"},{"content":"Tensorboard用途 Tensorboad 可以用来查看loss是否按照我们预想的变化，或者查看训练到某一步输出的图像是什么样。\nTensorboard使用 PyCharm进入pytorch环境，输入pip install tensorboard。\n例如：\n1.新建test_tb.py文件，并运行下列代码 1 2 3 4 5 6 7 8 9 10 from torch.utils.tensorboard import SummaryWriter # 创建一个logs文件夹，writer写的文件都在该文件夹下 writer = SummaryWriter(\u0026#34;logs\u0026#34;) for i in range(100): # 第二个参数为y轴，第三个参数为x轴 writer.add_scalar(\u0026#34;y=2x\u0026#34;, 2*i, i) writer.close() 2.在PyCharm终端控制台输入tensorboard --logdir=logs 运行tensorboard 输入tensorboard --logdir=logs --port=6007可以更改端口避免端口冲突\n3.完整代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from torch.utils.tensorboard import SummaryWriter import numpy as np from PIL import Image # 创建一个logs文件夹，writer写的文件都在该文件夹下 writer = SummaryWriter(\u0026#34;logs\u0026#34;) image_path = \u0026#34;dataset/train/ants_image/0013035.jpg\u0026#34; img_PIL = Image.open(image_path) # 将图像从PIL格式转为numpy.ndarray，具体查看add_image函数 img_array = np.array(img_PIL) # 从PIL到numpy，需要在add_image()中指定shape中每一个数字/维表示的含义 writer.add_image(\u0026#34;test\u0026#34;,img_array,1, dataformats=\u0026#34;HWC\u0026#34;) for i in range(100): # 第二个参数为y轴，第三个参数为x轴 writer.add_scalar(\u0026#34;y=2x\u0026#34;, 2*i, i) writer.close() ","date":"2025-04-14T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/105_tensorboard%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"105_Tensorboard的使用"},{"content":"PyCharm 进入官网https://www.jetbrains.com/pycharm/download/other.html 选择community 2024.1.4版本下载安装\n新建项目\n![[Pasted image 20250413194842.png]]\n新建一个test文件，打开Settings对话框，选择当前项目中的Python Interpreter ——\u0026gt; Add Interpreter，选择anaconda/Scripts/conda.exe，选择完成之后加载环境，新建项目\n![[Pasted image 20250413195310.png]]\n新建项目后打开PyCharm的Python Console输入import torch （若报错，尝试重启电脑） ——\u0026gt; 输入torch.cuda.is_available()，返回True则说明成功创建项目\nJupyter（在环境中安装Jupyter） 打开anaconda Prompt，输入pip install notebook指令，安装完成后输入jupyter notebook即可正常启动jupyter Notebook\n","date":"2025-04-13T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/101_python%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEpycharmjupyter/","title":"101_Python编辑器的选择、安装及配置（Pycharm、Jupyter）"},{"content":"安装Python版本 打开Anaconda的Prompt终端，输入jupyter kernelspec list，查看已经安装的Python版本。如下图所示，只有Anaconda自带的Python3\n![[Pasted image 20250413160000.png]]\n输入conda create -n pytorch python=3.10 ，输入[y]/n 时输入 y ，创建 pytorch 虚拟环境，它会安装 python3.10 到 anaconda3 的 env 目录下。\n输入conda activate pytorch 激活pytorch环境后，在pytorch.org官网，找到下图安装指令，复制输入命令即可安装。 使用pip list可以查看版本\n![[Pasted image 20250413162503.png]]\n输入python，进入python环境 输入import torch，如果没有报错就说明pytorch安装成功 输入torch.cuda.is_available() ，如果显示TRUE，说明pytorch可以使用gpu\n![[Pasted image 20250413163314.png]]\n","date":"2025-04-13T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/102_pytorch%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AE%89%E8%A3%85/","title":"102_PyTorch环境的配置及安装"},{"content":"1.设置Git全局用户信息 git config user.email \u0026quot;你的邮箱\u0026quot; git config user.name \u0026quot;你的用户名\u0026quot; 2.配置Git使用代理（如果有代理） git config --global http.proxy http://127.0.0.1:代理端口号 git config --global https.proxy http://127.0.0.1:代理端口号 3.确保在项目根目录（非public） cd D:\\hugo\\dev hugo serve -D //启动hugo 4.生成静态文件并推送到远程仓库 hugo -D cd public git add . git commit -m \u0026quot;更新内容\u0026quot; git push -u origin main ","date":"2025-04-12T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/obsidian%E5%90%8C%E6%AD%A5%E5%88%B0github/","title":"obsidian同步到github"},{"content":"Transforms的用途 Transforms当成工具箱的话，里面的class就是不同的工具。例如像totensor、resize这些工具。 Transforms拿一些特定格式的图片，经过Transforms里面的工具，获得我们想要的结果。 Transforms该如何使用 1.transforms.Totensor的使用 1 2 3 4 5 6 7 8 from torchvision import transforms from PIL import Image img_path = \u0026#34;dataset/train/bees_image/16838648_415acd9e3f.jpg\u0026#34; img = Image.open(img_path) tensor_trans = transforms.ToTensor() # 创建 transforms.ToTensor类 的实例化对象 tensor_img = tensor_trans(img) # 调用 transforms.ToTensor类 的__call__的魔术方法 print(tensor_img) 2.需要Tensor数据类型的原因 Tensor有一些属性，比如反向传播、梯度等属性，它包装了神经网络需要的一些属性。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from torch.utils.tensorboard import SummaryWriter from torchvision import transforms from PIL import Image img_path = \u0026#34;dataset/train/bees_image/16838648_415acd9e3f.jpg\u0026#34; img = Image.open(img_path) writer = SummaryWriter(\u0026#34;logs\u0026#34;) tensor_trans = transforms.ToTensor() # 创建 transforms.ToTensor类 的实例化对象 tensor_img = tensor_trans(img) # 调用 transforms.ToTensor类 的__call__的魔术方法 writer.add_image(\u0026#34;Tensor_img\u0026#34;, tensor_img) writer.close() 在Terminal终端输入tensorboard --logdir=\u0026quot;logs\u0026quot;，打开tensorboard网址查看。 3.常见的Transforms工具 ","date":"0001-01-01T00:00:00Z","permalink":"https://xiaoyuia.github.io/xiaoyuia-gzj.github.io/p/","title":""}]